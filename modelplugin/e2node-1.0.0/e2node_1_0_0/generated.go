/*
Package e2node_1_0_0 is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/scondon/go/pkg/mod/github.com/openconfig/ygot@v0.6.1-0.20200103195725-e3c44fa43926/genutil/names.go
using the following YANG input files:
	- e2node@2020-05-01.yang
	- ietf-yang-library@2019-01-04.yang
Imported modules were sourced from:
	- yang/...
*/
package e2node_1_0_0

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

var (
	SchemaTree map[string]*yang.Entry
)

func init() {
	var err error
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " +  err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root: &Device{},
		SchemaTree: uzp,
		Unmarshal: Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn )
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// Device represents the /device YANG schema element.
type Device struct {
	E2Cp	*E2Node_E2Cp	`path:"e2-cp" module:"e2node"`
	E2Du	*E2Node_E2Du	`path:"e2-du" module:"e2node"`
	E2Up	*E2Node_E2Up	`path:"e2-up" module:"e2node"`
	E2Node	*E2Node_E2Node	`path:"e2node" module:"e2node"`
	YangLibrary	*IETFYangLibrary_YangLibrary	`path:"yang-library" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Device) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Device) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Device) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E2Node_E2Cp represents the /e2node/e2-cp YANG schema element.
type E2Node_E2Cp struct {
	Handover_5G	*bool	`path:"handover-5g" module:"e2node"`
}

// IsYANGGoStruct ensures that E2Node_E2Cp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*E2Node_E2Cp) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *E2Node_E2Cp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["E2Node_E2Cp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *E2Node_E2Cp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E2Node_E2Du represents the /e2node/e2-du YANG schema element.
type E2Node_E2Du struct {
}

// IsYANGGoStruct ensures that E2Node_E2Du implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*E2Node_E2Du) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *E2Node_E2Du) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["E2Node_E2Du"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *E2Node_E2Du) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E2Node_E2Node represents the /e2node/e2node YANG schema element.
type E2Node_E2Node struct {
	ExampleContainer	*E2Node_E2Node_ExampleContainer	`path:"example-container" module:"e2node"`
	Intervals	*E2Node_E2Node_Intervals	`path:"intervals" module:"e2node"`
}

// IsYANGGoStruct ensures that E2Node_E2Node implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*E2Node_E2Node) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *E2Node_E2Node) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["E2Node_E2Node"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *E2Node_E2Node) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E2Node_E2Node_ExampleContainer represents the /e2node/e2node/example-container YANG schema element.
type E2Node_E2Node_ExampleContainer struct {
	MaxHandoverRate	*uint32	`path:"max-handover-rate" module:"e2node"`
	MaxUes	*uint32	`path:"max-ues" module:"e2node"`
}

// IsYANGGoStruct ensures that E2Node_E2Node_ExampleContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*E2Node_E2Node_ExampleContainer) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *E2Node_E2Node_ExampleContainer) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["E2Node_E2Node_ExampleContainer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *E2Node_E2Node_ExampleContainer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E2Node_E2Node_Intervals represents the /e2node/e2node/intervals YANG schema element.
type E2Node_E2Node_Intervals struct {
	PdcpMeasReportPerUe	*uint32	`path:"PdcpMeasReportPerUe" module:"e2node"`
	RadioMeasReportPerCell	*uint32	`path:"RadioMeasReportPerCell" module:"e2node"`
	RadioMeasReportPerUe	*uint32	`path:"RadioMeasReportPerUe" module:"e2node"`
	SchedMeasReportPerCell	*uint32	`path:"SchedMeasReportPerCell" module:"e2node"`
	SchedMeasReportPerUe	*uint32	`path:"SchedMeasReportPerUe" module:"e2node"`
}

// IsYANGGoStruct ensures that E2Node_E2Node_Intervals implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*E2Node_E2Node_Intervals) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *E2Node_E2Node_Intervals) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["E2Node_E2Node_Intervals"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *E2Node_E2Node_Intervals) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E2Node_E2Up represents the /e2node/e2-up YANG schema element.
type E2Node_E2Up struct {
}

// IsYANGGoStruct ensures that E2Node_E2Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*E2Node_E2Up) IsYANGGoStruct() {}

// Validate validates s against the YANG schema corresponding to its type.
func (t *E2Node_E2Up) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["E2Node_E2Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *E2Node_E2Up) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary represents the /ietf-yang-library/yang-library YANG schema element.
type IETFYangLibrary_YangLibrary struct {
	ContentId	*string	`path:"content-id" module:"ietf-yang-library"`
	Datastore	map[E_IETFYangLibrary_DatastoreRef]*IETFYangLibrary_YangLibrary_Datastore	`path:"datastore" module:"ietf-yang-library"`
	ModuleSet	map[string]*IETFYangLibrary_YangLibrary_ModuleSet	`path:"module-set" module:"ietf-yang-library"`
	Schema	map[string]*IETFYangLibrary_YangLibrary_Schema	`path:"schema" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary) IsYANGGoStruct() {}

// NewDatastore creates a new entry in the Datastore list of the
// IETFYangLibrary_YangLibrary struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary) NewDatastore(Name E_IETFYangLibrary_DatastoreRef) (*IETFYangLibrary_YangLibrary_Datastore, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Datastore == nil {
		t.Datastore = make(map[E_IETFYangLibrary_DatastoreRef]*IETFYangLibrary_YangLibrary_Datastore)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Datastore[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Datastore", key)
	}

	t.Datastore[key] = &IETFYangLibrary_YangLibrary_Datastore{
		Name: Name,
	}

	return t.Datastore[key], nil
}

// NewModuleSet creates a new entry in the ModuleSet list of the
// IETFYangLibrary_YangLibrary struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary) NewModuleSet(Name string) (*IETFYangLibrary_YangLibrary_ModuleSet, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ModuleSet == nil {
		t.ModuleSet = make(map[string]*IETFYangLibrary_YangLibrary_ModuleSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ModuleSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ModuleSet", key)
	}

	t.ModuleSet[key] = &IETFYangLibrary_YangLibrary_ModuleSet{
		Name: &Name,
	}

	return t.ModuleSet[key], nil
}

// NewSchema creates a new entry in the Schema list of the
// IETFYangLibrary_YangLibrary struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary) NewSchema(Name string) (*IETFYangLibrary_YangLibrary_Schema, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Schema == nil {
		t.Schema = make(map[string]*IETFYangLibrary_YangLibrary_Schema)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Schema[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Schema", key)
	}

	t.Schema[key] = &IETFYangLibrary_YangLibrary_Schema{
		Name: &Name,
	}

	return t.Schema[key], nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_Datastore represents the /ietf-yang-library/yang-library/datastore YANG schema element.
type IETFYangLibrary_YangLibrary_Datastore struct {
	Name	E_IETFYangLibrary_DatastoreRef	`path:"name" module:"ietf-yang-library"`
	Schema	*string	`path:"schema" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_Datastore implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_Datastore) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_Datastore struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_Datastore) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"name": t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_Datastore) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_Datastore"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_Datastore) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_ModuleSet represents the /ietf-yang-library/yang-library/module-set YANG schema element.
type IETFYangLibrary_YangLibrary_ModuleSet struct {
	ImportOnlyModule	map[IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Key]*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule	`path:"import-only-module" module:"ietf-yang-library"`
	Module	map[string]*IETFYangLibrary_YangLibrary_ModuleSet_Module	`path:"module" module:"ietf-yang-library"`
	Name	*string	`path:"name" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_ModuleSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_ModuleSet) IsYANGGoStruct() {}

// IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Key represents the key for list ImportOnlyModule of element /ietf-yang-library/yang-library/module-set.
type IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Key struct {
	Name	string	`path:"name"`
	Revision	string	`path:"revision"`
}

// NewImportOnlyModule creates a new entry in the ImportOnlyModule list of the
// IETFYangLibrary_YangLibrary_ModuleSet struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary_ModuleSet) NewImportOnlyModule(Name string, Revision string) (*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ImportOnlyModule == nil {
		t.ImportOnlyModule = make(map[IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Key]*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule)
	}

	key := IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Key{
		Name: Name,
		Revision: Revision,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ImportOnlyModule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ImportOnlyModule", key)
	}

	t.ImportOnlyModule[key] = &IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule{
		Name: &Name,
		Revision: &Revision,
	}

	return t.ImportOnlyModule[key], nil
}

// NewModule creates a new entry in the Module list of the
// IETFYangLibrary_YangLibrary_ModuleSet struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary_ModuleSet) NewModule(Name string) (*IETFYangLibrary_YangLibrary_ModuleSet_Module, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Module == nil {
		t.Module = make(map[string]*IETFYangLibrary_YangLibrary_ModuleSet_Module)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Module[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Module", key)
	}

	t.Module[key] = &IETFYangLibrary_YangLibrary_ModuleSet_Module{
		Name: &Name,
	}

	return t.Module[key], nil
}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_ModuleSet struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_ModuleSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_ModuleSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_ModuleSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_ModuleSet) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule represents the /ietf-yang-library/yang-library/module-set/import-only-module YANG schema element.
type IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule struct {
	Location	[]string	`path:"location" module:"ietf-yang-library"`
	Name	*string	`path:"name" module:"ietf-yang-library"`
	Namespace	*string	`path:"namespace" module:"ietf-yang-library"`
	Revision	*string	`path:"revision" module:"ietf-yang-library"`
	Submodule	map[string]*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule	`path:"submodule" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule) IsYANGGoStruct() {}

// NewSubmodule creates a new entry in the Submodule list of the
// IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule) NewSubmodule(Name string) (*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Submodule == nil {
		t.Submodule = make(map[string]*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Submodule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Submodule", key)
	}

	t.Submodule[key] = &IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule{
		Name: &Name,
	}

	return t.Submodule[key], nil
}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.Revision == nil {
		return nil, fmt.Errorf("nil value for key Revision")
	}

	return map[string]interface{}{
		"name": *t.Name,
		"revision": *t.Revision,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule represents the /ietf-yang-library/yang-library/module-set/import-only-module/submodule YANG schema element.
type IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule struct {
	Location	[]string	`path:"location" module:"ietf-yang-library"`
	Name	*string	`path:"name" module:"ietf-yang-library"`
	Revision	*string	`path:"revision" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_ImportOnlyModule_Submodule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_ModuleSet_Module represents the /ietf-yang-library/yang-library/module-set/module YANG schema element.
type IETFYangLibrary_YangLibrary_ModuleSet_Module struct {
	Deviation	[]string	`path:"deviation" module:"ietf-yang-library"`
	Feature	[]string	`path:"feature" module:"ietf-yang-library"`
	Location	[]string	`path:"location" module:"ietf-yang-library"`
	Name	*string	`path:"name" module:"ietf-yang-library"`
	Namespace	*string	`path:"namespace" module:"ietf-yang-library"`
	Revision	*string	`path:"revision" module:"ietf-yang-library"`
	Submodule	map[string]*IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule	`path:"submodule" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_ModuleSet_Module implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_ModuleSet_Module) IsYANGGoStruct() {}

// NewSubmodule creates a new entry in the Submodule list of the
// IETFYangLibrary_YangLibrary_ModuleSet_Module struct. The keys of the list are populated from the input
// arguments.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module) NewSubmodule(Name string) (*IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule, error){

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Submodule == nil {
		t.Submodule = make(map[string]*IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Submodule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Submodule", key)
	}

	t.Submodule[key] = &IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule{
		Name: &Name,
	}

	return t.Submodule[key], nil
}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_ModuleSet_Module struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_ModuleSet_Module"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule represents the /ietf-yang-library/yang-library/module-set/module/submodule YANG schema element.
type IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule struct {
	Location	[]string	`path:"location" module:"ietf-yang-library"`
	Name	*string	`path:"name" module:"ietf-yang-library"`
	Revision	*string	`path:"revision" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_ModuleSet_Module_Submodule) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// IETFYangLibrary_YangLibrary_Schema represents the /ietf-yang-library/yang-library/schema YANG schema element.
type IETFYangLibrary_YangLibrary_Schema struct {
	ModuleSet	[]string	`path:"module-set" module:"ietf-yang-library"`
	Name	*string	`path:"name" module:"ietf-yang-library"`
}

// IsYANGGoStruct ensures that IETFYangLibrary_YangLibrary_Schema implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*IETFYangLibrary_YangLibrary_Schema) IsYANGGoStruct() {}

// ΛListKeyMap returns the keys of the IETFYangLibrary_YangLibrary_Schema struct, which is a YANG list entry.
func (t *IETFYangLibrary_YangLibrary_Schema) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *IETFYangLibrary_YangLibrary_Schema) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["IETFYangLibrary_YangLibrary_Schema"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *IETFYangLibrary_YangLibrary_Schema) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }


// E_IETFYangLibrary_DatastoreRef is a derived int64 type which is used to represent
// the enumerated node IETFYangLibrary_DatastoreRef. An additional value named
// IETFYangLibrary_DatastoreRef_UNSET is added to the enumeration which is used as
// the nil value, indicating that the enumeration was not explicitly set by
// the program importing the generated structures.
type E_IETFYangLibrary_DatastoreRef int64

// IsYANGGoEnum ensures that IETFYangLibrary_DatastoreRef implements the yang.GoEnum
// interface. This ensures that IETFYangLibrary_DatastoreRef can be identified as a
// mapped type for a YANG enumeration.
func (E_IETFYangLibrary_DatastoreRef) IsYANGGoEnum() {}

// ΛMap returns the value lookup map associated with  IETFYangLibrary_DatastoreRef.
func (E_IETFYangLibrary_DatastoreRef) ΛMap() map[string]map[int64]ygot.EnumDefinition { return ΛEnum; }

const (
	// IETFYangLibrary_DatastoreRef_UNSET corresponds to the value UNSET of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_UNSET E_IETFYangLibrary_DatastoreRef = 0
	// IETFYangLibrary_DatastoreRef_candidate corresponds to the value candidate of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_candidate E_IETFYangLibrary_DatastoreRef = 1
	// IETFYangLibrary_DatastoreRef_conventional corresponds to the value conventional of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_conventional E_IETFYangLibrary_DatastoreRef = 2
	// IETFYangLibrary_DatastoreRef_dynamic corresponds to the value dynamic of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_dynamic E_IETFYangLibrary_DatastoreRef = 3
	// IETFYangLibrary_DatastoreRef_intended corresponds to the value intended of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_intended E_IETFYangLibrary_DatastoreRef = 4
	// IETFYangLibrary_DatastoreRef_operational corresponds to the value operational of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_operational E_IETFYangLibrary_DatastoreRef = 5
	// IETFYangLibrary_DatastoreRef_running corresponds to the value running of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_running E_IETFYangLibrary_DatastoreRef = 6
	// IETFYangLibrary_DatastoreRef_startup corresponds to the value startup of IETFYangLibrary_DatastoreRef
	IETFYangLibrary_DatastoreRef_startup E_IETFYangLibrary_DatastoreRef = 7
)


// ΛEnum is a map, keyed by the name of the type defined for each enum in the
// generated Go code, which provides a mapping between the constant int64 value
// of each value of the enumeration, and the string that is used to represent it
// in the YANG schema. The map is named ΛEnum in order to avoid clash with any
// valid YANG identifier.
var ΛEnum = map[string]map[int64]ygot.EnumDefinition{
	"E_IETFYangLibrary_DatastoreRef": {
		1: {Name: "candidate", DefiningModule: "ietf-datastores"},
		2: {Name: "conventional", DefiningModule: "ietf-datastores"},
		3: {Name: "dynamic", DefiningModule: "ietf-datastores"},
		4: {Name: "intended", DefiningModule: "ietf-datastores"},
		5: {Name: "operational", DefiningModule: "ietf-datastores"},
		6: {Name: "running", DefiningModule: "ietf-datastores"},
		7: {Name: "startup", DefiningModule: "ietf-datastores"},
	},
}


var (
	// ySchema is a byte slice contain a gzip compressed representation of the
	// YANG schema from which the Go code was generated. When uncompressed the
	// contents of the byte slice is a JSON document containing an object, keyed
	// on the name of the generated struct, and containing the JSON marshalled
	// contents of a goyang yang.Entry struct, which defines the schema for the
	// fields within the struct.
	ySchema = []byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5d, 0x6f, 0x53, 0xdb, 0x3c,
		0x12, 0x7f, 0x9f, 0x4f, 0x91, 0xf1, 0xcb, 0x0e, 0x4e, 0x48, 0xda, 0xe7, 0x7a, 0xf0, 0x8e, 0x07,
		0xe8, 0x1c, 0x53, 0x68, 0x19, 0x68, 0x6f, 0xee, 0x0e, 0x52, 0x46, 0xd8, 0x4a, 0xd0, 0x9c, 0x23,
		0x67, 0x6c, 0x99, 0x23, 0xd7, 0xf2, 0xdd, 0x9f, 0xb1, 0x9d, 0x98, 0x24, 0xfe, 0xa7, 0x95, 0x64,
		0x93, 0x94, 0x7d, 0x45, 0x88, 0x25, 0x79, 0xa5, 0x5d, 0xfd, 0xf4, 0xdb, 0x95, 0x36, 0xfa, 0xd9,
		0xe9, 0x76, 0xbb, 0x5d, 0xeb, 0x0b, 0x99, 0x52, 0xeb, 0xb0, 0x6b, 0xb9, 0xf4, 0x91, 0x39, 0xd4,
		0xda, 0x4b, 0xbf, 0xfd, 0xcc, 0xb8, 0x6b, 0x1d, 0x76, 0x07, 0x8b, 0x7f, 0x8f, 0x7d, 0x3e, 0x66,
		0x13, 0xeb, 0xb0, 0xbb, 0xbf, 0xf8, 0xe2, 0x84, 0x05, 0xd6, 0x61, 0x37, 0x6d, 0x22, 0xf9, 0x82,
		0x0e, 0x6d, 0x67, 0xb6, 0xf6, 0xd5, 0x5a, 0xeb, 0xe9, 0xe3, 0xbd, 0xf5, 0x87, 0xeb, 0x2f, 0xc9,
		0xbe, 0xde, 0x7c, 0x59, 0xf6, 0xe0, 0x32, 0xa0, 0x63, 0xf6, 0x94, 0x7b, 0xc9, 0xda, 0x8b, 0x72,
		0x6f, 0x49, 0x9e, 0x5e, 0xfb, 0x51, 0xe0, 0xd0, 0xc2, 0x9a, 0xa9, 0x24, 0x74, 0xfe, 0x3f, 0x3f,
		0x88, 0x85, 0xb1, 0x66, 0xe9, 0x4b, 0xf6, 0x8a, 0x0b, 0xfe, 0x83, 0x84, 0x47, 0xc1, 0x24, 0x9a,
		0x52, 0x2e, 0xac, 0xc3, 0xae, 0x08, 0x22, 0x5a, 0x52, 0x70, 0xa5, 0x54, 0x2c, 0x53, 0xae, 0xd0,
		0xf3, 0xda, 0x37, 0xcf, 0x1b, 0x3d, 0xdd, 0x1c, 0xde, 0xec, 0xc1, 0x03, 0xe1, 0xae, 0xff, 0x48,
		0x03, 0xfb, 0x8f, 0x49, 0x79, 0x6f, 0x96, 0x63, 0xb1, 0x5a, 0xb8, 0x44, 0xcc, 0x85, 0x0a, 0xf6,
		0x4b, 0x1e, 0x67, 0xaa, 0x18, 0x96, 0x14, 0xa8, 0x50, 0x89, 0x9c, 0x6a, 0x64, 0x55, 0x04, 0x56,
		0x15, 0x58, 0x65, 0xd2, 0xaa, 0x2b, 0x56, 0x61, 0x89, 0x2a, 0xb3, 0x56, 0xbf, 0xcd, 0x67, 0x54,
		0x6e, 0x9c, 0xee, 0x7d, 0xdf, 0xa3, 0x84, 0x57, 0x0d, 0xd6, 0x72, 0xe6, 0x0c, 0x3a, 0x72, 0x82,
		0x55, 0x5b, 0xdb, 0x11, 0xe7, 0xbe, 0x20, 0x82, 0xf9, 0xbc, 0xd8, 0xe8, 0x42, 0xe7, 0x81, 0x4e,
		0xc9, 0x8c, 0x88, 0x87, 0x58, 0xbc, 0x3e, 0x1d, 0x72, 0xdf, 0xa5, 0xfd, 0xa2, 0x29, 0x9d, 0x16,
		0x17, 0x41, 0xe4, 0x08, 0xbe, 0xe8, 0xcd, 0xe9, 0xf0, 0x8b, 0xef, 0xd2, 0xbb, 0xd3, 0xe1, 0xf1,
		0xc6, 0x50, 0xbe, 0xc8, 0xb4, 0x22, 0x4f, 0x0c, 0x14, 0x6e, 0x54, 0x89, 0x23, 0x6e, 0xd4, 0x06,
		0x8e, 0xe4, 0xde, 0xb2, 0x05, 0x38, 0xe2, 0x46, 0x56, 0x5b, 0x9a, 0x2d, 0xee, 0x7e, 0x89, 0x66,
		0x4f, 0x22, 0x49, 0xcd, 0x46, 0xd5, 0x2b, 0x44, 0xd4, 0xca, 0x0a, 0x11, 0x6d, 0xe1, 0x0a, 0x11,
		0xcd, 0x5a, 0xd3, 0x6c, 0x04, 0x99, 0xb3, 0xdf, 0x25, 0xe7, 0x6c, 0xdc, 0x78, 0x95, 0x6a, 0x93,
		0xe7, 0x2d, 0xe8, 0x96, 0x0e, 0xb7, 0x4f, 0xb7, 0x74, 0x68, 0x6c, 0xf5, 0xa7, 0x4f, 0x64, 0x3a,
		0xf3, 0xa8, 0xed, 0xf8, 0x5c, 0x10, 0xc6, 0x69, 0x50, 0xcf, 0x01, 0xf2, 0x55, 0xaa, 0x99, 0xc0,
		0xa0, 0x8e, 0x09, 0xec, 0x1b, 0x60, 0x02, 0x85, 0x6a, 0xda, 0x72, 0x26, 0x50, 0xa4, 0x46, 0x35,
		0x26, 0x50, 0xa6, 0xde, 0xac, 0xc0, 0x94, 0x3c, 0xd9, 0x19, 0x77, 0x0b, 0x88, 0x90, 0x18, 0x8b,
		0xe5, 0xc8, 0xe6, 0xab, 0xd6, 0x74, 0xb1, 0x9a, 0x00, 0x4a, 0x13, 0x41, 0x88, 0x19, 0xc0, 0xcc,
		0x01, 0x6a, 0x16, 0xca, 0xe6, 0xa1, 0x6c, 0x26, 0x60, 0x73, 0xa9, 0x36, 0x9b, 0x1a, 0xf3, 0x91,
		0x27, 0x94, 0xf9, 0x95, 0x8f, 0x71, 0xf1, 0x5e, 0x6a, 0xac, 0x17, 0x56, 0xf1, 0x51, 0xa2, 0xe8,
		0x15, 0xe1, 0x93, 0xb8, 0xf5, 0x1b, 0xa9, 0x31, 0x92, 0xd3, 0x5d, 0xd2, 0xf0, 0x05, 0xe3, 0xd2,
		0xca, 0x06, 0x9a, 0x73, 0xae, 0xda, 0x3f, 0x89, 0x17, 0x51, 0x85, 0x7a, 0x9f, 0x02, 0xe2, 0xc4,
		0x6b, 0xf0, 0x09, 0x9b, 0x30, 0x11, 0xc6, 0x0d, 0x48, 0xd7, 0x7f, 0xde, 0x03, 0x0c, 0x05, 0x79,
		0x6a, 0x7d, 0x28, 0x3e, 0x0c, 0x0f, 0x3e, 0x1c, 0xfc, 0xed, 0xe3, 0xf0, 0xe0, 0x8f, 0x16, 0xc7,
		0xa4, 0x63, 0xa6, 0xd4, 0xa8, 0xa3, 0x56, 0xbf, 0x42, 0x27, 0x09, 0xb2, 0x46, 0x34, 0x84, 0x41,
		0x71, 0x5c, 0xc1, 0x30, 0x00, 0xef, 0x23, 0x00, 0x23, 0x00, 0x23, 0x00, 0x23, 0x00, 0xff, 0x96,
		0x00, 0x0c, 0x22, 0xd2, 0x35, 0x3e, 0x70, 0xad, 0x2f, 0x9c, 0xfe, 0x91, 0x74, 0x90, 0xaa, 0xdc,
		0xe4, 0xf4, 0x4f, 0xda, 0xd0, 0x71, 0xd6, 0x8e, 0x6c, 0x6c, 0xae, 0xc0, 0x63, 0x65, 0x5c, 0xd0,
		0xe0, 0x91, 0x78, 0x61, 0xbd, 0x83, 0xf7, 0x52, 0x14, 0x1d, 0xbb, 0x6d, 0x77, 0xec, 0x2e, 0x5d,
		0x67, 0x76, 0x41, 0x49, 0x78, 0x45, 0x67, 0x7e, 0x20, 0x2e, 0x69, 0xf0, 0x1d, 0xe0, 0xda, 0x15,
		0x55, 0xae, 0xe9, 0xe6, 0x09, 0x1d, 0x93, 0xc8, 0x4b, 0x7a, 0x39, 0xd8, 0x47, 0x22, 0x82, 0x44,
		0x04, 0x89, 0x08, 0x12, 0x11, 0x24, 0x22, 0x9a, 0x9e, 0xe0, 0x15, 0x71, 0x99, 0xbf, 0x86, 0xc4,
		0xc7, 0xd4, 0xf3, 0xe4, 0x81, 0xbc, 0xa4, 0x3e, 0x62, 0x39, 0x62, 0x39, 0x62, 0x39, 0x62, 0x39,
		0x62, 0xf9, 0xab, 0x62, 0x39, 0x84, 0x92, 0x17, 0xd6, 0x46, 0x1c, 0x47, 0x1c, 0x47, 0x1c, 0x47,
		0x1c, 0x47, 0x1c, 0x6f, 0x11, 0xc7, 0xaf, 0x9d, 0x07, 0xea, 0x6a, 0x70, 0xf2, 0x92, 0xfa, 0x88,
		0xe5, 0x88, 0xe5, 0x88, 0xe5, 0x88, 0xe5, 0x88, 0xe5, 0xaf, 0x8a, 0xe5, 0x10, 0x4e, 0x5e, 0x58,
		0x1b, 0x71, 0x1c, 0x71, 0x1c, 0x71, 0x1c, 0x71, 0x1c, 0x71, 0xdc, 0x34, 0x8e, 0xb7, 0xbf, 0x61,
		0x5f, 0xb7, 0xe1, 0xdd, 0xad, 0xdb, 0xa8, 0x3f, 0xcb, 0x1a, 0x78, 0xd5, 0xec, 0x99, 0x82, 0x33,
		0xf1, 0x75, 0xa2, 0xcb, 0x1c, 0xc6, 0x9f, 0x13, 0x3e, 0xb1, 0x3d, 0x76, 0x1f, 0x90, 0x60, 0x5e,
		0x7e, 0x24, 0x7f, 0xad, 0x14, 0xf0, 0x60, 0xfe, 0x50, 0xe1, 0x60, 0x7e, 0xfc, 0x3e, 0x8f, 0xdd,
		0x6f, 0xdf, 0xe9, 0xfc, 0xa5, 0x60, 0xa6, 0x8e, 0xe8, 0x3b, 0x3e, 0x17, 0x94, 0x0b, 0x9b, 0xb9,
		0xf5, 0x47, 0x37, 0x56, 0xca, 0x6a, 0xa6, 0xe7, 0x99, 0x38, 0xbb, 0x51, 0xae, 0x22, 0x28, 0xa1,
		0x68, 0xf9, 0x00, 0x47, 0xa9, 0x0a, 0xd5, 0x40, 0x4a, 0x3e, 0x51, 0x2f, 0x14, 0x01, 0xe3, 0x13,
		0x99, 0x3c, 0xbd, 0xbf, 0x6b, 0x9c, 0x05, 0x72, 0x89, 0x20, 0xa1, 0xf0, 0x03, 0x5a, 0x6f, 0x50,
		0x2f, 0x45, 0xb7, 0xe0, 0x2c, 0x10, 0xda, 0x53, 0x35, 0x54, 0x64, 0x05, 0x16, 0x50, 0x2f, 0xe9,
		0xdf, 0x24, 0xa5, 0x77, 0xc0, 0x45, 0xa9, 0x57, 0xff, 0x8e, 0xfa, 0x29, 0xb5, 0xe6, 0xf1, 0x5a,
		0xce, 0x4a, 0x36, 0xfb, 0xed, 0x80, 0x8e, 0x01, 0x3e, 0xcb, 0x40, 0x82, 0xaf, 0x5a, 0x67, 0x2e,
		0xe5, 0x82, 0x89, 0xf9, 0x9f, 0x24, 0x04, 0x68, 0x4a, 0x16, 0x98, 0x8a, 0x39, 0x75, 0x28, 0xed,
		0x24, 0xc1, 0x1c, 0xa5, 0x75, 0xd1, 0xe6, 0x9c, 0x4c, 0x99, 0x63, 0x35, 0xe1, 0x86, 0x28, 0x8a,
		0xe4, 0xcf, 0x68, 0x90, 0x10, 0x4a, 0xe2, 0x6d, 0x93, 0x58, 0x8e, 0xcf, 0x1f, 0x63, 0x23, 0x48,
		0xe4, 0x52, 0xf1, 0x91, 0x60, 0xfa, 0x54, 0x93, 0x36, 0x2f, 0x35, 0xe1, 0x2e, 0x73, 0x89, 0xa0,
		0x16, 0xb8, 0x9d, 0xe7, 0xbd, 0xb6, 0x85, 0x0d, 0x05, 0x09, 0x44, 0x34, 0xdb, 0x05, 0x51, 0x63,
		0x37, 0x8c, 0xbb, 0xd4, 0xdd, 0x05, 0x59, 0x83, 0x88, 0xf3, 0x98, 0xa9, 0xc1, 0x45, 0x05, 0xd5,
		0x18, 0x6d, 0xd3, 0x64, 0x85, 0x9b, 0x7d, 0xf3, 0x42, 0x81, 0xcd, 0xbb, 0x79, 0x91, 0xe0, 0x66,
		0xdc, 0xbc, 0x4c, 0x60, 0x73, 0x95, 0x33, 0xd3, 0x91, 0x2e, 0x63, 0x51, 0x8a, 0xe6, 0xa7, 0xe1,
		0x0f, 0x79, 0x7e, 0xbb, 0x28, 0x8f, 0x0c, 0x17, 0x19, 0x6e, 0x6e, 0xc4, 0x3d, 0x4a, 0xc6, 0x40,
		0x6e, 0x2b, 0x13, 0x90, 0xbf, 0x5c, 0xc4, 0xe6, 0x7a, 0xbd, 0x7e, 0xaf, 0xd7, 0x4f, 0x0d, 0xb0,
		0x9f, 0xf8, 0x59, 0xad, 0x44, 0x45, 0x3f, 0xd3, 0x79, 0x8d, 0x63, 0x67, 0x9d, 0xb3, 0x50, 0x1c,
		0x09, 0x51, 0xe3, 0x48, 0x5e, 0x30, 0x7e, 0xea, 0xd1, 0x58, 0x8b, 0x31, 0xd3, 0xe2, 0x91, 0xe7,
		0x55, 0xcc, 0xcb, 0x0b, 0xf2, 0x24, 0x5f, 0xf8, 0x6b, 0xe0, 0xd2, 0x80, 0xba, 0x7f, 0xce, 0x17,
		0x45, 0xdb, 0x88, 0xfa, 0x32, 0x2a, 0xc6, 0xf6, 0x6a, 0x9c, 0xb2, 0xbf, 0xf6, 0x8f, 0x8c, 0x4b,
		0xb1, 0x11, 0x4b, 0x3d, 0x3b, 0xfd, 0xf6, 0xe9, 0xdf, 0x84, 0x4f, 0xce, 0xd3, 0x26, 0xee, 0x56,
		0x3f, 0x9f, 0x64, 0xcd, 0x69, 0x84, 0x6a, 0xa6, 0xbe, 0x1b, 0x79, 0xd4, 0x0e, 0xa9, 0xa8, 0x8f,
		0xd5, 0xac, 0x94, 0xc5, 0x60, 0xcd, 0xee, 0x04, 0x6b, 0xd8, 0x74, 0xe6, 0x07, 0xc2, 0xf6, 0xb9,
		0x37, 0xb7, 0x53, 0x15, 0xca, 0x2f, 0x6d, 0x05, 0x75, 0xe5, 0x96, 0xb9, 0x01, 0x2e, 0x73, 0xbb,
		0xbb, 0xcc, 0xd5, 0x99, 0x54, 0x56, 0xd0, 0xf3, 0x9d, 0x7a, 0x94, 0x2c, 0x5e, 0x17, 0x97, 0x35,
		0x25, 0x47, 0x01, 0xb6, 0xd1, 0x29, 0x6d, 0x5e, 0x2a, 0x66, 0xa6, 0x61, 0x6e, 0xaa, 0x66, 0xa7,
		0x6d, 0x7e, 0xda, 0x66, 0xa8, 0x67, 0x8e, 0x30, 0xd6, 0x2f, 0xe9, 0xae, 0xc8, 0xb3, 0xb1, 0x9c,
		0xc6, 0xa2, 0x80, 0x41, 0xb4, 0x55, 0xbd, 0x27, 0xa2, 0x2a, 0xbe, 0x14, 0x43, 0xd2, 0x62, 0x4c,
		0x5a, 0x0c, 0x4a, 0x8d, 0x51, 0xc1, 0x35, 0x2e, 0x31, 0x5c, 0x72, 0xfb, 0x0d, 0x39, 0x2d, 0x4b,
		0xec, 0x3b, 0x20, 0xbe, 0x20, 0xbe, 0x34, 0x80, 0x2f, 0x09, 0xed, 0x67, 0xc9, 0xfe, 0xc3, 0x98,
		0x55, 0xfe, 0x3e, 0x43, 0x39, 0xd6, 0x00, 0xea, 0x9c, 0x53, 0x3e, 0x49, 0x5c, 0x10, 0x58, 0xa8,
		0x1a, 0x1e, 0xa2, 0x54, 0x3a, 0xaf, 0xa5, 0x38, 0xc7, 0x8a, 0x03, 0xf2, 0xf5, 0xd4, 0xb2, 0xb4,
		0xbe, 0xc6, 0x99, 0x25, 0x8d, 0x38, 0xb0, 0xd2, 0xb9, 0xae, 0xcd, 0x21, 0x7b, 0xaf, 0x39, 0x64,
		0xfb, 0xaf, 0x38, 0x64, 0x9d, 0x66, 0x4a, 0x8f, 0x00, 0xf3, 0xe3, 0x92, 0x08, 0x41, 0x03, 0x0e,
		0x9e, 0x20, 0xd6, 0x0d, 0xb1, 0xff, 0x7f, 0x64, 0xff, 0xe7, 0x6e, 0xb4, 0xf8, 0xb0, 0x6f, 0x1f,
		0xdc, 0xde, 0xda, 0x77, 0xbd, 0xd1, 0x3b, 0x28, 0x2e, 0xf6, 0x7e, 0xf5, 0x7a, 0xbf, 0x6e, 0x7e,
		0x3c, 0xfd, 0x6b, 0xd4, 0x7b, 0xf7, 0xab, 0x77, 0xf3, 0x63, 0x7a, 0x91, 0x7c, 0xe8, 0xdd, 0xfc,
		0xf0, 0xce, 0x47, 0xbd, 0x77, 0xf2, 0x10, 0x37, 0x6a, 0x79, 0xd9, 0x0d, 0x67, 0xc4, 0x51, 0x5c,
		0x7b, 0xd3, 0xaa, 0xb8, 0x00, 0xe3, 0x02, 0xfc, 0x9b, 0x11, 0x7c, 0x23, 0x93, 0x2b, 0xa0, 0x8f,
		0x2c, 0x54, 0xf2, 0x9d, 0xb3, 0x9a, 0x38, 0xb5, 0x70, 0x6a, 0xb5, 0x3f, 0xb5, 0xb8, 0xbc, 0xe9,
		0xad, 0x4d, 0xae, 0x03, 0x40, 0x9d, 0x85, 0x78, 0x8d, 0xf3, 0xd9, 0xcd, 0x29, 0xa5, 0x46, 0xda,
		0x75, 0xc8, 0xbb, 0x36, 0x49, 0xc9, 0x1a, 0xb8, 0xbd, 0x75, 0x7f, 0x7e, 0x78, 0xb6, 0xe3, 0x3f,
		0xc3, 0xe5, 0x1f, 0xf8, 0xf9, 0x81, 0x51, 0xa7, 0x41, 0x42, 0xac, 0xa1, 0xa1, 0xda, 0x93, 0xab,
		0x8d, 0x28, 0x45, 0xd1, 0xb3, 0x52, 0xef, 0xaf, 0x11, 0x4f, 0xcb, 0x90, 0xc7, 0x65, 0xca, 0x8d,
		0x30, 0xe9, 0x4e, 0x68, 0x78, 0x62, 0x46, 0x3c, 0xb2, 0xb7, 0x30, 0xb4, 0x9d, 0x76, 0x6a, 0x8d,
		0x9a, 0xf2, 0x0c, 0x5b, 0x24, 0x71, 0x61, 0x74, 0x2f, 0xb9, 0xa5, 0x96, 0x07, 0xb4, 0xac, 0x2a,
		0x8c, 0xc6, 0x0d, 0x90, 0xc6, 0x21, 0x8d, 0x5b, 0x8a, 0x22, 0xbb, 0x53, 0x97, 0x55, 0x00, 0xef,
		0xd8, 0xe5, 0x54, 0x0d, 0xdc, 0xb9, 0xd3, 0x04, 0x4c, 0xb0, 0x19, 0xeb, 0x98, 0xb3, 0x01, 0xb3,
		0xd6, 0x35, 0x6f, 0x63, 0x66, 0x6e, 0xcc, 0xdc, 0xcd, 0x98, 0xbd, 0x62, 0x38, 0x10, 0xa8, 0x73,
		0xb0, 0x57, 0xa3, 0x19, 0x38, 0x50, 0x0c, 0x20, 0xa8, 0x76, 0x4f, 0x69, 0xc7, 0x70, 0x95, 0x51,
		0x2a, 0x6f, 0xfe, 0xad, 0x72, 0x27, 0xfd, 0x46, 0x94, 0x76, 0x12, 0xe1, 0x16, 0x04, 0xc9, 0xbe,
		0x06, 0xed, 0x30, 0x16, 0x46, 0x3b, 0x11, 0x0f, 0x11, 0x0f, 0x7f, 0x3f, 0x3c, 0x54, 0xdf, 0xc9,
		0x44, 0xff, 0xdb, 0xb8, 0x93, 0x38, 0x40, 0xff, 0x7b, 0x73, 0x68, 0xdf, 0xa3, 0xff, 0xad, 0xec,
		0x7f, 0xbf, 0x46, 0x90, 0xd2, 0xd8, 0x8e, 0x6a, 0xd6, 0xa2, 0xb1, 0x9d, 0xd5, 0xa6, 0xe3, 0x12,
		0x10, 0x3a, 0x02, 0xde, 0x1c, 0xca, 0x01, 0x37, 0x70, 0x93, 0x08, 0x69, 0x09, 0xd2, 0x92, 0x1d,
		0xa2, 0x25, 0xb8, 0x5f, 0xd3, 0x38, 0x5a, 0x19, 0x8d, 0x53, 0xd5, 0x27, 0x0c, 0x99, 0x71, 0x76,
		0x77, 0xee, 0x78, 0xac, 0x6c, 0x12, 0x80, 0x5c, 0x42, 0x52, 0xae, 0x1e, 0x2c, 0x41, 0xe9, 0x25,
		0xc1, 0xa7, 0x9f, 0x4f, 0xfc, 0xe8, 0x43, 0x03, 0xd6, 0x5d, 0x58, 0x3a, 0xd3, 0x45, 0xd2, 0xf6,
		0x35, 0x15, 0x77, 0x67, 0xc9, 0xbb, 0xbf, 0x72, 0x6f, 0x9e, 0x7e, 0x77, 0x77, 0x9d, 0xbd, 0xd9,
		0x54, 0x68, 0x5f, 0x2b, 0x3d, 0x62, 0xc5, 0x98, 0xbb, 0x92, 0xcb, 0x2c, 0xcc, 0x9a, 0x95, 0xac,
		0x58, 0xc9, 0x7a, 0x61, 0x56, 0x5b, 0x37, 0x30, 0x40, 0x2b, 0x35, 0x69, 0x9d, 0x32, 0xb9, 0x3e,
		0x26, 0x6c, 0xd1, 0x6a, 0xe2, 0x9e, 0x4e, 0x60, 0x52, 0x16, 0x26, 0x62, 0x61, 0x22, 0xd6, 0x46,
		0x41, 0x97, 0x3e, 0x32, 0xc5, 0x4c, 0xac, 0x97, 0xaa, 0x78, 0x9c, 0xac, 0x4d, 0xe6, 0x8f, 0xc7,
		0xc9, 0x80, 0x09, 0xf2, 0x39, 0x64, 0xfb, 0x08, 0x3b, 0x02, 0xbe, 0x92, 0x30, 0xbf, 0x60, 0x34,
		0xf5, 0x09, 0xf3, 0xd0, 0x71, 0xc0, 0x9c, 0x2e, 0xd9, 0xe1, 0xb2, 0xc6, 0x94, 0x88, 0x28, 0x50,
		0x38, 0x38, 0xb1, 0xac, 0x88, 0x70, 0x85, 0x70, 0xd5, 0x3a, 0x5c, 0x61, 0x66, 0x97, 0xb9, 0xa0,
		0x61, 0x2e, 0x08, 0x8f, 0x99, 0x5d, 0xe0, 0x21, 0xc3, 0xcc, 0xae, 0xb7, 0x96, 0xd9, 0x85, 0x4c,
		0xc4, 0x34, 0x13, 0xc1, 0x5f, 0xb1, 0x40, 0x2e, 0x82, 0x49, 0x6e, 0x88, 0x33, 0x4d, 0xe3, 0x0c,
		0xfe, 0x8a, 0x05, 0xe2, 0x0b, 0xfa, 0x3a, 0xe8, 0xeb, 0xa0, 0xaf, 0x83, 0xbe, 0x0e, 0xfa, 0x3a,
		0xad, 0x2e, 0xbb, 0xf8, 0x2b, 0x16, 0xb8, 0x00, 0x23, 0xc1, 0x6f, 0x60, 0x72, 0xe1, 0xaf, 0x58,
		0xe0, 0xd4, 0xda, 0xc5, 0xa9, 0xa5, 0x77, 0x80, 0x50, 0x89, 0xdf, 0x2a, 0xaf, 0xdf, 0x7a, 0x07,
		0x05, 0x31, 0x1d, 0x1a, 0xf1, 0xe0, 0xad, 0xe0, 0x01, 0xa6, 0x43, 0x9b, 0x34, 0x67, 0x03, 0x66,
		0xad, 0x6b, 0xde, 0xc6, 0xcc, 0xdc, 0x98, 0xb9, 0x9b, 0x31, 0x7b, 0x45, 0xbf, 0x12, 0xd3, 0xa1,
		0xb5, 0x43, 0xcf, 0x46, 0x42, 0xd0, 0x46, 0x42, 0xd1, 0x7a, 0x21, 0x69, 0xb8, 0x05, 0x61, 0x3a,
		0x34, 0xe2, 0x21, 0xe2, 0x21, 0xa6, 0x43, 0x2b, 0x69, 0x17, 0xd3, 0xa1, 0x4d, 0x5a, 0xe2, 0xe6,
		0x1a, 0x82, 0xe9, 0xd0, 0xa6, 0x20, 0x41, 0xbd, 0x16, 0xa6, 0x43, 0xeb, 0xc4, 0x0f, 0x9a, 0xa5,
		0x23, 0x98, 0x0e, 0x8d, 0xb4, 0x04, 0x69, 0x49, 0x53, 0xd1, 0x4c, 0x23, 0xd4, 0x04, 0xd3, 0xa1,
		0x31, 0x1d, 0x5a, 0xdb, 0xa9, 0xdd, 0xda, 0x74, 0xe8, 0xb6, 0x53, 0xa0, 0xb7, 0x3e, 0xf1, 0x19,
		0xf3, 0x9d, 0xdb, 0xcc, 0x77, 0x6e, 0x36, 0xc7, 0xb9, 0xb9, 0xcc, 0x66, 0xa9, 0x30, 0x12, 0x24,
		0x6c, 0x84, 0xb7, 0x28, 0x1b, 0xe6, 0x4b, 0xbb, 0x71, 0x8b, 0xb2, 0xf4, 0x8f, 0xbf, 0x4b, 0x46,
		0x9e, 0xf1, 0x1e, 0x64, 0xb9, 0xfe, 0x35, 0x73, 0x0f, 0x72, 0xed, 0x3d, 0xc2, 0xaa, 0x48, 0xa6,
		0x73, 0x11, 0x72, 0xcd, 0xa5, 0xef, 0x72, 0x97, 0xbd, 0xe3, 0x05, 0xc8, 0x46, 0x60, 0xc6, 0xf0,
		0x05, 0xc8, 0x12, 0x77, 0x5c, 0xe7, 0x06, 0x57, 0xca, 0x46, 0x71, 0x45, 0x7a, 0xb3, 0x2b, 0x52,
		0x2b, 0xf7, 0xfa, 0xaf, 0x30, 0x40, 0x89, 0xbb, 0xfd, 0xdf, 0x04, 0x23, 0x47, 0x1a, 0x8a, 0x93,
		0x1e, 0x69, 0x28, 0xd2, 0x50, 0x03, 0x34, 0xb4, 0x92, 0xc9, 0x01, 0x29, 0xe8, 0x75, 0xda, 0x96,
		0x2c, 0xff, 0xec, 0x54, 0xf4, 0xba, 0xae, 0xb7, 0xb0, 0x5e, 0x5a, 0x45, 0x54, 0x57, 0xb6, 0x5b,
		0xeb, 0xfd, 0x79, 0x91, 0x3a, 0xfd, 0xb4, 0x90, 0xbb, 0x4c, 0x5e, 0x8b, 0x85, 0x9f, 0xc8, 0x7f,
		0xe9, 0x95, 0xef, 0xe7, 0xa1, 0x60, 0xb3, 0x0f, 0xd6, 0xea, 0xa3, 0x35, 0xe9, 0x4e, 0xe8, 0x23,
		0x73, 0x16, 0x2b, 0xdf, 0x73, 0xe7, 0xf9, 0x2f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00,
		0xff, 0xff, 0x73, 0x97, 0xa1, 0xd3, 0x02, 0xd2, 0x00, 0x00,
	}
)


// ΛEnumTypes is a map, keyed by a YANG schema path, of the enumerated types that
// correspond with the leaf. The type is represented as a reflect.Type. The naming
// of the map ensures that there are no clashes with valid YANG identifiers.
var ΛEnumTypes = map[string][]reflect.Type{
	"/yang-library/datastore/name": []reflect.Type{
		reflect.TypeOf((E_IETFYangLibrary_DatastoreRef)(0)),
	},
}

